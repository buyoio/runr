// Autogenerated file - DO NOT EDIT
package linux

var lok8sCommand = `certbot::ensure() { local a5;local -a a12=( "domain" "Domain name" );:args "Issue a certificate for a domain" "${@}";system::certbot;certbot certonly --standalone --non-interactive --no-redirect --register-unsafely-without-email --agree-tos -d "${a5}";};docker::cron::prune() { :args "Setup docker system prune cron" "${@}";echo '%[1]s root /usr/bin/docker system prune -a --volumes --force' > /etc/cron.d/docker_system_prune;/etc/init.d/cron reload;};docker::stop() { :args "Stop runner container" "${@}";docker stop $(docker ps -qf "runr=runner") || :;docker rm -f $(docker ps -qaf "runr=runner") || :;};docker::build() { local -a a12=( "dockerfile" "Dockerfile content ('-' for stdin)" );:args "Build docker image" "${@}";[ "${dockerfile}" != "-" ] || dockerfile="$(cat)";echo "${dockerfile}" | docker build --no-cache -t github-runner:local -;};docker::start() { local a11 a4 a10 a6 a13;local -a a12=( "name"    "Name of the runner" "orgrepo" "Organization or/and repository (org/repo)" "token"   "Runner token" "labels"  "Runner labels" "path"    "Runner work path" );:args "Run docker container" "${@}";a13="${a13}/${a11}";local -a a7;a7=( -v "${a13}:${a13}" -v /var/run/docker.sock:/var/run/docker.sock "-e" "RUNNER_NAME=${a11}-$(hostname)" "-e" "RUNNER_TOKEN=${a10}" "-e" "LABELS=${a6}" "-e" "RUNNER_WORKDIR=${a13}" "-e" "DISABLE_AUTO_UPDATE=1" "-l" "runr=runner" );if echo "${a4}" | grep -q '/';then a7+=( "-e" "RUNNER_SCOPE=repo" "-e" "REPO_URL=https://github.com/${a4}" );else a7+=( "-e" "RUNNER_SCOPE=org" "-e" "ORG_NAME=${a4}" );fi;mkdir -p "${a13}";docker run -d --restart=always --name "${a11}" --add-host host.docker.internal:host-gateway "${a7[@]}" github-runner:local;};harbor::ensure() { local a5 a13="/opt";local -a a12=( "domain" "Domain name" "path"   "Path to install" );:args "Install or update Harbor" "${@}";system::certbot;system::docker;system::docker-compose;certbot::ensure "${a5}";mkdir -p "${a13}";pushd "${a13}";trap 'popd' EXIT RETURN;local -r a16="$(github::latest goharbor/harbor)";! grep -qw "${a16}" .harbor/version &>/dev/null || return 0;curl -sL -o harbor.tgz "https://github.com/goharbor/harbor/releases/download/${a16}/harbor-online-installer-${a16}.tgz";tar xzf --overwrite harbor.tgz;rm harbor.tgz;local -r a1="$(string::random)";local -r a2="$(string::random)";[ ! -f db ] || { a2="$(cat db)";};echo "${a2}" > db;pushd harbor;trap 'popd; popd' EXIT RETURN;cp harbor.yml.tmpl harbor.yml;a15="$(echo "${a5}" | rev | cut -d'.' -f1,2 | rev)";sed -i -e '/hostname:/ s%: .*%: '"${a5}"'%' -e '/  certificate:/ s%: .*%: /etc/letsencrypt/live/'"${a15}"'/fullchain.pem%' -e '/  private_key:/ s%: .*%: /etc/letsencrypt/live/'"${a15}"'/privkey.pem%' -e '/harbor_admin_password:/ s%: .*%: '"${a1}"'%' -e '/  password:/ s%: .*%: '"${a2}"'%' harbor.yml;echo "${a16}" > version;./install.sh;};hetzner::rescue-mode() { [ -x /root/.oldroot/nfs/install/installimage ] || { return 127;};};hetzner::install() { local a0;local -a a12=( "installimage:~stdin" "config (use - for stdin)" );:args "Prevision a server with a Hetzner installimage" "${@}";hetzner::rescue-mode || { echo "Server is not in rescue mode" >&2;return 1;};[ "${a0}" != "-" ] || a0="$(cat)";echo "${a0}" > /tmp/installimage;/root/.oldroot/nfs/install/installimage -a -c /tmp/installimage;reboot;};lok8s() { bash::version 4 3 || { echo "Bash 4.3 or later is required" >&2;exit 2;};local -a a9=( 'system::ensure' "Ensure system dependencies" 'system::install' "Install system dependencies" 'system::user' "Create system user" 'system::docker' "Install Docker" 'system::docker-compose' "Install Docker Compose" 'system::certbot' "Install Certbot" 'system::reboot' "Reboot system (if required)" 'certbot::ensure' "Issue or renew SSL certificate" 'docker::ensure' "Ensure docker" 'docker::build' "Build runner docker image" 'docker::start' "Start runner docker container" 'docker::stop' "Stop runner docker container" 'docker::cron' "Setup docker cron" 'hetzner::install' "Install Hetzner image" 'harbor::ensure' "Ensure Harbor" );:usage "Preparse linux system for runr." "${@}";"${a9[@]}";};[[ "${0}" != "${BASH_SOURCE[0]}" ]] || lok8s "${@}";system::non-interactive() { export DEBIAN_FRONTEND=noninteractive;echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections;};system::root() { [ "${EUID}" = 0 ] || sudo -i;};system::reboot() { [ ! -e /var/run/reboot-required ] || reboot;};system::ensure() { local -a a3;local -A a12=( 'packages' "System dependencies" );:args "Ensure system dependencies" "${@}";apt-get update;apt-get -o Dpkg::Options::="--force-confold" upgrade -q -y;apt-get install -y "${a3[@]}";system::reboot;};system::docker() { local a14 a8;local -a a12=( 'user'      "User to add to docker group" 'force|f:+' "Force install" );:args "Install Docker" "${@}";! command -v docker || (( a8 )) || return 0;sh -c "$(curl -sL https://get.docker.com)";usermod -aG docker "${a14}";};system::docker-compose() { local -a a12=( 'force|f:+' "Force install" );:args "Install Docker Compose" "${@}";! command -v docker-compose || (( a8 )) || return 0;local -r a16="$(github::latest docker/compose)";curl -s -L "https://github.com/docker/compose/releases/download/${a16}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose;chmod +x /usr/local/bin/docker-compose;};system::certbot() { :args "Install Certbot" "${@}";! command -v certbot || return 0;system::ensure curl zip python3 python3-pip;python3 -m pip install certbot;};`