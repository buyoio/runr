// Autogenerated file - DO NOT EDIT
package linux

var lok8sScript = `#!/usr/bin/env argsh
set -euo pipefail
certbot-ensure() { local domain email;local -a args=( "domain" "Domain name" "email|" "Email for Let's Encrypt certificate" );:args "Issue a certificate for a domain" "${@}";local -a e=();if [[ -n "${email}" ]];then e+=("--email" "${email}");else e+=("--register-unsafely-without-email");fi;system-certbot;if [[ -f "/etc/letsencrypt/live/${domain}/fullchain.pem" ]];then certbot renew;return;fi;certbot certonly --standalone --non-interactive --no-redirect --agree-tos -d "${domain}" "${e[@]}";};docker-cron() { :args "Setup docker system prune cron" "${@}";echo '%[1]s root /usr/bin/docker system prune -a --volumes --force' > /etc/cron.d/docker_system_prune;/etc/init.d/cron reload;};docker-stop() { :args "Stop runner container" "${@}";docker stop $(docker ps -qf "label=runr=runner") 2>/dev/null || :;docker rm -f $(docker ps -qaf "label=runr=runner") 2>/dev/null || :;};docker-build() { local dockerfile;local -a args=( "dockerfile:~file" "Dockerfile" );:args "Build docker image" "${@}";docker build --no-cache -t github-runner:local - <"${dockerfile}";};docker-start() { local name orgrepo token labels path;local -a args=( "name"    "Name of the runner" "orgrepo" "Organization or/and repository (org/repo)" "token"   "Runner token" "labels"  "Runner labels" "path"    "Runner work path" );:args "Run docker container" "${@}";path="${path}/${name}";local -a params;params=( -v "${path}:${path}" -v /var/run/docker.sock:/var/run/docker.sock "-e" "RUNNER_NAME=${name}-$(hostname)" "-e" "RUNNER_TOKEN=${token}" "-e" "LABELS=${labels}" "-e" "RUNNER_WORKDIR=${path}" "-e" "DISABLE_AUTO_UPDATE=1" "-l" "runr=runner" );if echo "${orgrepo}" | grep -q '/';then params+=( "-e" "RUNNER_SCOPE=repo" "-e" "REPO_URL=https://github.com/${orgrepo}" );else params+=( "-e" "RUNNER_SCOPE=org" "-e" "ORG_NAME=${orgrepo}" );fi;mkdir -p "${path}";docker run -d --restart=always --name "${name}" --add-host host.docker.internal:host-gateway "${params[@]}" github-runner:local;};harbor-ensure() { local domain email path="/opt";local -a args=( "domain" "Domain name" "path|"  "Path to install" "email|" "Email for Let's Encrypt certificate" );:args "Install or update Harbor" "${@}";system-certbot;system-docker-compose;certbot-ensure "${domain}" --email "${email}";mkdir -p "${path}";cd "${path}";local -r v="$(github::latest goharbor/harbor)";! grep -qw "${v}" harbor/version &>/dev/null || return 0;curl -sL -o harbor.tgz "https://github.com/goharbor/harbor/releases/download/${v}/harbor-online-installer-${v}.tgz";tar -xzf harbor.tgz;rm harbor.tgz;cd harbor;local passwd_admin passwd_db;if [[ -f db ]];then passwd_db="$(cat ./db)";passwd_admin="$(cat ./admin)";else passwd_db="$(string::random)";passwd_admin="$(string::random)";fi;echo -n "${passwd_db}" > ./db;echo -n "${passwd_admin}" > ./admin;cp harbor.yml.tmpl harbor.yml;sed -i -e '/hostname:/ s%: .*%: '"${domain}"'%' -e '/  certificate:/ s%: .*%: /etc/letsencrypt/live/'"${domain}"'/fullchain.pem%' -e '/  private_key:/ s%: .*%: /etc/letsencrypt/live/'"${domain}"'/privkey.pem%' -e '/harbor_admin_password:/ s%: .*%: '"${passwd_admin}"'%' -e '/  password:/ s%: .*%: '"${passwd_db}"'%' harbor.yml;echo "${v}" > version;./install.sh;};hetzner-rescue-mode() { [ -x /root/.oldroot/nfs/install/installimage ] || { return 127;};};hetzner-install() { local installimage;local -a args=( "installimage:~stdin" "config (use - for stdin)" );:args "Prevision a server with a Hetzner installimage" "${@}";hetzner-rescue-mode || { echo "Server is not in rescue mode" >&2;return 1;};[ "${installimage}" != "-" ] || installimage="$(cat)";echo "${installimage}" > /tmp/installimage;/root/.oldroot/nfs/install/installimage -a -c /tmp/installimage;reboot;};lok8s() { bash::version 4 3 || { echo "Bash 4.3 or later is required" >&2;exit 2;};local -a usage=( 'system-ensure' "Ensure system dependencies" 'system-install' "Install system dependencies" 'system-user' "Create system user" 'system-docker' "Install Docker" 'system-docker-compose' "Install Docker Compose" 'system-certbot' "Install Certbot" 'system-reboot' "Reboot system (if required)" 'certbot-ensure' "Issue or renew SSL certificate" 'docker-ensure' "Ensure docker" 'docker-build' "Build runner docker image" 'docker-start' "Start runner docker container" 'docker-stop' "Stop runner docker container" 'docker-cron' "Setup docker cron" 'hetzner-install' "Install Hetzner image" 'harbor-ensure' "Ensure Harbor" );:usage "Preparse linux system for runr." "${@}";"${usage[@]}";};[[ "${0}" != "${BASH_SOURCE[0]}" ]] || lok8s "${@}";system-non-interactive() { export DEBIAN_FRONTEND=noninteractive;echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections;};system-root() { [ "${EUID}" = 0 ] || sudo -i;};system-reboot() { [ ! -e /var/run/reboot-required ] || reboot;};system-ensure() { local -a packages args=( 'packages' "System dependencies" );:args "Ensure system dependencies" "${@}";apt-get update;apt-get -o Dpkg::Options::="--force-confold" upgrade -q -y;apt-get install -y "${packages[@]}";system-reboot;};system-user() { local user;local -a args=( 'user' "System user" );:args "Create system user" "${@}";id -u "${user}" &>/dev/null || { useradd --create-home --shell /bin/bash "${user}";addgroup wheel || :;usermod -aG wheel user;echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers;};};system-docker() { local user force;local -a args=( 'user'      "User to add to docker group" 'force|f:+' "Force install" );:args "Install Docker" "${@}";! command -v docker || (( force )) || return 0;sh -c "$(curl -sL https://get.docker.com)";usermod -aG docker "${user}";};system-docker-compose() { local -a args=( 'force|f:+' "Force install" );:args "Install Docker Compose" "${@}";! command -v docker-compose || (( force )) || return 0;local -r v="$(github::latest docker/compose)";curl -s -L "https://github.com/docker/compose/releases/download/${v}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose;chmod +x /usr/local/bin/docker-compose;};system-certbot() { :args "Install Certbot" "${@}";! command -v certbot || return 0;system-ensure curl zip python3 python3-pip;python3 -m pip install certbot;};
[[ -z "${ARGSH_SOURCE}" ]] || lok8s "${@}"`